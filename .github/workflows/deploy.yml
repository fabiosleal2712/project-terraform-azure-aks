name: Deploy to Azure AKS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TERRAFORM_VERSION: '1.5.0'
  
jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        run: |
          terraform plan \
            -var="environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" \
            -out=tfplan
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan
  
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://portal.azure.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
      
      - name: Get Outputs
        id: terraform-output
        run: |
          echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
    
    outputs:
      aks_cluster_name: ${{ steps.terraform-output.outputs.aks_cluster_name }}
      resource_group_name: ${{ steps.terraform-output.outputs.resource_group_name }}
      acr_name: ${{ steps.terraform-output.outputs.acr_name }}
  
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        service:
          - name: chat-api
            dockerfile: nutri-veda/src/Chat/Chat.API/Dockerfile
            context: nutri-veda
          - name: diary-api
            dockerfile: nutri-veda/src/Diary/Diary.API/Dockerfile
            context: nutri-veda
          - name: users-api
            dockerfile: nutri-veda/src/Users/Users.API/Dockerfile
            context: nutri-veda
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and Push to ACR
        run: |
          az acr build \
            --registry ${{ needs.terraform-apply.outputs.acr_name }} \
            --image ${{ matrix.service.name }}:${{ github.sha }} \
            --image ${{ matrix.service.name }}:latest \
            --file ${{ matrix.service.dockerfile }} \
            ${{ matrix.service.context }}
  
  deploy-to-aks:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: [terraform-apply, build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.terraform-apply.outputs.resource_group_name }} \
            --name ${{ needs.terraform-apply.outputs.aks_cluster_name }} \
            --overwrite-existing
      
      - name: Update Deployment Manifests
        run: |
          ACR_NAME="${{ needs.terraform-apply.outputs.acr_name }}"
          sed -i "s/<ACR_NAME>/$ACR_NAME/g" kubernetes/deployments/*.yaml
          sed -i "s/:latest/:${{ github.sha }}/g" kubernetes/deployments/*.yaml
      
      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f kubernetes/namespaces/
          kubectl apply -f kubernetes/deployments/
          kubectl apply -f kubernetes/ingress/
      
      - name: Wait for Deployments
        run: |
          kubectl wait --for=condition=available --timeout=300s \
            deployment/chat-api -n nutri-veda-dev || true
      
      - name: Get Deployment Status
        run: |
          echo "=== Pods Status ==="
          kubectl get pods -n nutri-veda-dev
          echo ""
          echo "=== Services Status ==="
          kubectl get svc -n nutri-veda-dev
          echo ""
          echo "=== Ingress Status ==="
          kubectl get ingress -n nutri-veda-dev
      
      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          kubectl rollout undo deployment/chat-api -n nutri-veda-dev || true
          kubectl rollout undo deployment/diary-api -n nutri-veda-dev || true
          kubectl rollout undo deployment/users-api -n nutri-veda-dev || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
